taField	typeallowed.html#taField	TTypeAllowedFlag.taField	
taHeap	typeallowed.html#taHeap	TTypeAllowedFlag.taHeap	
taConcept	typeallowed.html#taConcept	TTypeAllowedFlag.taConcept	
taIsOpenArray	typeallowed.html#taIsOpenArray	TTypeAllowedFlag.taIsOpenArray	
taNoUntyped	typeallowed.html#taNoUntyped	TTypeAllowedFlag.taNoUntyped	
taIsTemplateOrMacro	typeallowed.html#taIsTemplateOrMacro	TTypeAllowedFlag.taIsTemplateOrMacro	
taProcContextIsNotMacro	typeallowed.html#taProcContextIsNotMacro	TTypeAllowedFlag.taProcContextIsNotMacro	
TTypeAllowedFlag	typeallowed.html#TTypeAllowedFlag	typeallowed: TTypeAllowedFlag	
TTypeAllowedFlags	typeallowed.html#TTypeAllowedFlags	typeallowed: TTypeAllowedFlags	
typeAllowed	typeallowed.html#typeAllowed,PType,TSymKind,PContext,TTypeAllowedFlags	typeallowed: typeAllowed(t: PType; kind: TSymKind; c: PContext; flags: TTypeAllowedFlags = {}): PType	
noView	typeallowed.html#noView	ViewTypeKind.noView	
immutableView	typeallowed.html#immutableView	ViewTypeKind.immutableView	
mutableView	typeallowed.html#mutableView	ViewTypeKind.mutableView	
ViewTypeKind	typeallowed.html#ViewTypeKind	typeallowed: ViewTypeKind	
classifyViewType	typeallowed.html#classifyViewType,PType	typeallowed: classifyViewType(t: PType): ViewTypeKind	
directViewType	typeallowed.html#directViewType,PType	typeallowed: directViewType(t: PType): ViewTypeKind	
requiresInit	typeallowed.html#requiresInit,PType	typeallowed: requiresInit(t: PType): bool	
