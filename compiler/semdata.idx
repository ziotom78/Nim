TOptionEntry	semdata.html#TOptionEntry	semdata: TOptionEntry	
POptionEntry	semdata.html#POptionEntry	semdata: POptionEntry	
PProcCon	semdata.html#PProcCon	semdata: PProcCon	
TProcCon	semdata.html#TProcCon	semdata: TProcCon	
TMatchedConcept	semdata.html#TMatchedConcept	semdata: TMatchedConcept	
TInstantiationPair	semdata.html#TInstantiationPair	semdata: TInstantiationPair	
efLValue	semdata.html#efLValue	TExprFlag.efLValue	
efWantIterator	semdata.html#efWantIterator	TExprFlag.efWantIterator	
efInTypeof	semdata.html#efInTypeof	TExprFlag.efInTypeof	
efNeedStatic	semdata.html#efNeedStatic	TExprFlag.efNeedStatic	
efPreferStatic	semdata.html#efPreferStatic	TExprFlag.efPreferStatic	
efPreferNilResult	semdata.html#efPreferNilResult	TExprFlag.efPreferNilResult	
efWantStmt	semdata.html#efWantStmt	TExprFlag.efWantStmt	
efAllowStmt	semdata.html#efAllowStmt	TExprFlag.efAllowStmt	
efDetermineType	semdata.html#efDetermineType	TExprFlag.efDetermineType	
efExplain	semdata.html#efExplain	TExprFlag.efExplain	
efAllowDestructor	semdata.html#efAllowDestructor	TExprFlag.efAllowDestructor	
efWantValue	semdata.html#efWantValue	TExprFlag.efWantValue	
efOperand	semdata.html#efOperand	TExprFlag.efOperand	
efNoSemCheck	semdata.html#efNoSemCheck	TExprFlag.efNoSemCheck	
efNoEvaluateGeneric	semdata.html#efNoEvaluateGeneric	TExprFlag.efNoEvaluateGeneric	
efInCall	semdata.html#efInCall	TExprFlag.efInCall	
efFromHlo	semdata.html#efFromHlo	TExprFlag.efFromHlo	
efNoSem2Check	semdata.html#efNoSem2Check	TExprFlag.efNoSem2Check	
efNoUndeclared	semdata.html#efNoUndeclared	TExprFlag.efNoUndeclared	
TExprFlag	semdata.html#TExprFlag	semdata: TExprFlag	
TExprFlags	semdata.html#TExprFlags	semdata: TExprFlags	
PContext	semdata.html#PContext	semdata: PContext	
TContext	semdata.html#TContext	semdata: TContext	
config	semdata.html#config.t,PContext	semdata: config(c: PContext): ConfigRef	
makeInstPair	semdata.html#makeInstPair,PSym,PInstantiation	semdata: makeInstPair(s: PSym; inst: PInstantiation): TInstantiationPair	
filename	semdata.html#filename,PContext	semdata: filename(c: PContext): string	
scopeDepth	semdata.html#scopeDepth,PContext	semdata: scopeDepth(c: PContext): int	
getCurrOwner	semdata.html#getCurrOwner,PContext	semdata: getCurrOwner(c: PContext): PSym	
pushOwner	semdata.html#pushOwner,PContext,PSym	semdata: pushOwner(c: PContext; owner: PSym)	
popOwner	semdata.html#popOwner,PContext	semdata: popOwner(c: PContext)	
lastOptionEntry	semdata.html#lastOptionEntry,PContext	semdata: lastOptionEntry(c: PContext): POptionEntry	
popProcCon	semdata.html#popProcCon,PContext	semdata: popProcCon(c: PContext)	
put	semdata.html#put,PProcCon,PSym,PSym	semdata: put(p: PProcCon; key, val: PSym)	
get	semdata.html#get,PProcCon,PSym	semdata: get(p: PProcCon; key: PSym): PSym	
getGenSym	semdata.html#getGenSym,PContext,PSym	semdata: getGenSym(c: PContext; s: PSym): PSym	
considerGenSyms	semdata.html#considerGenSyms,PContext,PNode	semdata: considerGenSyms(c: PContext; n: PNode)	
newOptionEntry	semdata.html#newOptionEntry,ConfigRef	semdata: newOptionEntry(conf: ConfigRef): POptionEntry	
pushOptionEntry	semdata.html#pushOptionEntry,PContext	semdata: pushOptionEntry(c: PContext): POptionEntry	
popOptionEntry	semdata.html#popOptionEntry,PContext	semdata: popOptionEntry(c: PContext)	
newContext	semdata.html#newContext,ModuleGraph,PSym	semdata: newContext(graph: ModuleGraph; module: PSym): PContext	
addConverter	semdata.html#addConverter,PContext,PSym	semdata: addConverter(c: PContext; conv: PSym)	
addPattern	semdata.html#addPattern,PContext,PSym	semdata: addPattern(c: PContext; p: PSym)	
newLib	semdata.html#newLib,TLibKind	semdata: newLib(kind: TLibKind): PLib	
addToLib	semdata.html#addToLib,PLib,PSym	semdata: addToLib(lib: PLib; sym: PSym)	
newTypeS	semdata.html#newTypeS,TTypeKind,PContext	semdata: newTypeS(kind: TTypeKind; c: PContext): PType	
makePtrType	semdata.html#makePtrType,PSym,PType,IdGenerator	semdata: makePtrType(owner: PSym; baseType: PType; idgen: IdGenerator): PType	
makePtrType	semdata.html#makePtrType,PContext,PType	semdata: makePtrType(c: PContext; baseType: PType): PType	
makeTypeWithModifier	semdata.html#makeTypeWithModifier,PContext,TTypeKind,PType	semdata: makeTypeWithModifier(c: PContext; modifier: TTypeKind; baseType: PType): PType	
makeVarType	semdata.html#makeVarType,PContext,PType	semdata: makeVarType(c: PContext; baseType: PType; kind = tyVar): PType	
makeVarType	semdata.html#makeVarType,PSym,PType,IdGenerator	semdata: makeVarType(owner: PSym; baseType: PType; idgen: IdGenerator; kind = tyVar): PType	
makeTypeDesc	semdata.html#makeTypeDesc,PContext,PType	semdata: makeTypeDesc(c: PContext; typ: PType): PType	
makeTypeSymNode	semdata.html#makeTypeSymNode,PContext,PType,TLineInfo	semdata: makeTypeSymNode(c: PContext; typ: PType; info: TLineInfo): PNode	
makeTypeFromExpr	semdata.html#makeTypeFromExpr,PContext,PNode	semdata: makeTypeFromExpr(c: PContext; n: PNode): PType	
newTypeWithSons	semdata.html#newTypeWithSons,PSym,TTypeKind,seq[PType],IdGenerator	semdata: newTypeWithSons(owner: PSym; kind: TTypeKind; sons: seq[PType];\n                idgen: IdGenerator): PType	
newTypeWithSons	semdata.html#newTypeWithSons,PContext,TTypeKind,seq[PType]	semdata: newTypeWithSons(c: PContext; kind: TTypeKind; sons: seq[PType]): PType	
makeStaticExpr	semdata.html#makeStaticExpr,PContext,PNode	semdata: makeStaticExpr(c: PContext; n: PNode): PNode	
makeAndType	semdata.html#makeAndType,PContext,PType,PType	semdata: makeAndType(c: PContext; t1, t2: PType): PType	
makeOrType	semdata.html#makeOrType,PContext,PType,PType	semdata: makeOrType(c: PContext; t1, t2: PType): PType	
makeNotType	semdata.html#makeNotType,PContext,PType	semdata: makeNotType(c: PContext; t1: PType): PType	
makeRangeWithStaticExpr	semdata.html#makeRangeWithStaticExpr,PContext,PNode	semdata: makeRangeWithStaticExpr(c: PContext; n: PNode): PType	
rangeHasUnresolvedStatic	semdata.html#rangeHasUnresolvedStatic.t,PType	semdata: rangeHasUnresolvedStatic(t: PType): bool	
errorType	semdata.html#errorType,PContext	semdata: errorType(c: PContext): PType	
errorNode	semdata.html#errorNode,PContext,PNode	semdata: errorNode(c: PContext; n: PNode): PNode	
fillTypeS	semdata.html#fillTypeS,PType,TTypeKind,PContext	semdata: fillTypeS(dest: PType; kind: TTypeKind; c: PContext)	
makeRangeType	semdata.html#makeRangeType,PContext,BiggestInt,BiggestInt,TLineInfo,PType	semdata: makeRangeType(c: PContext; first, last: BiggestInt; info: TLineInfo;\n              intType: PType = nil): PType	
markIndirect	semdata.html#markIndirect,PContext,PSym	semdata: markIndirect(c: PContext; s: PSym)	
illFormedAst	semdata.html#illFormedAst,PNode,ConfigRef	semdata: illFormedAst(n: PNode; conf: ConfigRef)	
illFormedAstLocal	semdata.html#illFormedAstLocal,PNode,ConfigRef	semdata: illFormedAstLocal(n: PNode; conf: ConfigRef)	
checkSonsLen	semdata.html#checkSonsLen,PNode,int,ConfigRef	semdata: checkSonsLen(n: PNode; length: int; conf: ConfigRef)	
checkMinSonsLen	semdata.html#checkMinSonsLen,PNode,int,ConfigRef	semdata: checkMinSonsLen(n: PNode; length: int; conf: ConfigRef)	
isTopLevel	semdata.html#isTopLevel,PContext	semdata: isTopLevel(c: PContext): bool	
pushCaseContext	semdata.html#pushCaseContext,PContext,PNode	semdata: pushCaseContext(c: PContext; caseNode: PNode)	
popCaseContext	semdata.html#popCaseContext,PContext	semdata: popCaseContext(c: PContext)	
setCaseContextIdx	semdata.html#setCaseContextIdx,PContext,int	semdata: setCaseContextIdx(c: PContext; idx: int)	
